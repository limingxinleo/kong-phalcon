<?php
// +----------------------------------------------------------------------
// | 用于请求接口的单元测试基类 [ WE CAN DO IT JUST THINK IT ]
// +----------------------------------------------------------------------
// | Copyright (c) 2016-2017 limingxinleo All rights reserved.
// +----------------------------------------------------------------------
// | Author: limx <715557344@qq.com> <https://github.com/limingxinleo>
// +----------------------------------------------------------------------
namespace Tests;

use App\Common\Enums\SystemCode;
use App\Utils\Redis;
use GuzzleHttp\Client;
use GuzzleHttp\Promise;
use Psr\Http\Message\ResponseInterface;

/**
 * Class HttpTestCase
 * @package Tests
 * @method ResponseInterface get(string | UriInterface $uri, array $options = [])
 * @method ResponseInterface head(string | UriInterface $uri, array $options = [])
 * @method ResponseInterface put(string | UriInterface $uri, array $options = [])
 * @method ResponseInterface patch(string | UriInterface $uri, array $options = [])
 * @method ResponseInterface delete(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface getAsync(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface headAsync(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface putAsync(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface postAsync(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface patchAsync(string | UriInterface $uri, array $options = [])
 * @method Promise\PromiseInterface deleteAsync(string | UriInterface $uri, array $options = [])
 */
abstract class HttpTestCase extends UnitTestCase
{
    public $client;

    protected $tokenKey = 'test:admin:token';

    public function getToken()
    {
        return Redis::get($this->tokenKey);
    }

    public function setToken($token)
    {
        return Redis::set($this->tokenKey, $token);
    }

    public function login()
    {
        $res = $this->post('/api/user/login', [
            'username' => 'superadmin',
            'password' => 'superadmin'
        ]);

        if ($res['code'] != 0) {
            throw new \Exception('登录失败');
        }

        $token = $res['data']['token'];

        return $this->setToken($token);
    }

    protected function setUp()
    {
        parent::setUp();
        $this->client = new Client([
            'base_uri' => env('PHPUNIT_URL')
        ]);

        if (empty($this->getToken())) {
            $this->login();
        }
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function post($api, $data = [])
    {
        if (env('PHPUNIT_ENGINE') === 'php') {
            $api = '?_url=' . $api;
        }

        /** @var ResponseInterface $res */
        $res = $this->client->post($api, [
            'form_params' => $data,
            'headers' => [
                SystemCode::HTTP_X_AUTH_TOKEN => $this->getToken()
            ],
        ]);

        $result = json_decode($res->getBody()->getContents(), true);
        return $result;
    }

    public function __call($name, $arguments)
    {
        if (env('PHPUNIT_ENGINE') === 'php') {
            $arguments[0] = '?_url=' . $arguments[0];
        }
        $res = $this->client->$name(...$arguments);
        return $res;
    }
}
